"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.detectAndRegisterSolflareMetaMaskWallet = void 0;
const wallet_1 = require("@wallet-standard/wallet");
const wallet_js_1 = require("./wallet.js");
let stopPolling = false;
/** @internal */
function detectAndRegisterSolflareMetaMaskWallet() {
    // If detected, stop polling.
    if (stopPolling)
        return true;
    (function () {
        return __awaiter(this, void 0, void 0, function* () {
            try {
                // Try to detect, stop polling if detected, and register the wallet.
                if (yield isSnapProviderDetected()) {
                    if (!stopPolling) {
                        stopPolling = true;
                        (0, wallet_1.registerWallet)(new wallet_js_1.SolflareMetaMaskWallet());
                    }
                }
            }
            catch (error) {
                // Stop polling on unhandled errors (this should never happen).
                stopPolling = true;
            }
        });
    })();
    // Keep polling.
    return false;
}
exports.detectAndRegisterSolflareMetaMaskWallet = detectAndRegisterSolflareMetaMaskWallet;
function isSnapProviderDetected() {
    return __awaiter(this, void 0, void 0, function* () {
        try {
            const provider = window.ethereum;
            if (!provider)
                return false;
            const providerProviders = provider.providers;
            if (providerProviders && Array.isArray(providerProviders)) {
                for (const provider of providerProviders) {
                    if (yield isSnapSupported(provider))
                        return true;
                }
            }
            const providerDetected = provider.detected;
            if (providerDetected && Array.isArray(providerDetected)) {
                for (const provider of providerDetected) {
                    if (yield isSnapSupported(provider))
                        return true;
                }
            }
            return yield isSnapSupported(provider);
        }
        catch (error) {
            return false;
        }
    });
}
function isSnapSupported(provider) {
    return __awaiter(this, void 0, void 0, function* () {
        try {
            yield provider.request({ method: 'wallet_getSnaps' });
            return true;
        }
        catch (error) {
            return false;
        }
    });
}
//# sourceMappingURL=detect.js.map